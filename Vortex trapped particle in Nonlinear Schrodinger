import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint, simps

# Constants
g = 0
ell = 20.0
k = 1.0
R0 = 1.2
R1 = 0.0

# Define the system of first-order ODEs     #Just change the sign of 2 Eval for stattionary state with different ansatz of positive arguement. 
def system(y, r, Eval):
    zeta, eta = y
    dzeta_dt = eta
    deta_dt = -((2 * k + 1) / r) * eta + (-2 * Eval + 2 * g * abs(zeta)**2 * r**(2 * k)) * zeta
    return [dzeta_dt, deta_dt]

# Define the shooting method function
def shooting_method(Eval):
    initial_conditions = [R0, 0]
    r_min = 1e-10
    num_steps = 100000
    r_values = np.linspace(r_min, ell, num_steps)

    solution = odeint(system, initial_conditions, r_values, args=(Eval,))
    R_r_values = solution[:, 0] * (r_values ** k)   #MIGHT NOT NEED THE SECOND TERM
    R_end = R_r_values[-1]
    return R_end - R1

# Define the bisection method for root finding
def bisection_method(f, a, b, tol=1e-8, max_iter=10000):
    if np.sign(f(a)) == np.sign(f(b)):
        raise ValueError("The function has the same sign at both endpoints of the interval.")

    for _ in range(max_iter):
        c = (a + b) / 2
        if np.abs(f(c)) < tol:
            return c
        if np.sign(f(c)) == np.sign(f(a)):
            a = c
        else:
            b = c
    raise ValueError("Bisection method did not converge.")

# Define the Newton's method for root finding with numerical derivative
def newtons_method(f, x0, tol=1e-7, max_iter=1000, h=1e-12):
    def numerical_derivative(f, x, h):
        return (f(x + h) - f(x - h)) / (2 * h)
    
    for _ in range(max_iter):
        f_x0 = f(x0)
        df_x0 = numerical_derivative(f, x0, h)
        
        if np.abs(df_x0) < np.finfo(float).eps:  # Prevent division by zero
            raise ValueError("Derivative is too small.")
        
        x1 = x0 - f_x0 / df_x0
        
        if np.abs(x1 - x0) < tol:
            return x1
        
        x0 = x1
    
    raise ValueError("Newton's method did not converge.")

# Initial guesses for eigenvalue E
E_guess_lower = 0.0001
E_guess_upper = 0.05


# Find eigenvalue using bisection method
E_solution = bisection_method(shooting_method, E_guess_lower, E_guess_upper)
# Alternatively, use Newton's method
#x0 = 1.0
#E_solution = newtons_method(shooting_method, x0)

print("Eigenvalue E:", E_solution)

# Solve the system of ODEs with the computed eigenvalue E
r_min = 1e-10
num_steps2 = 20000
r_values2 = np.linspace(r_min, ell, num_steps2)
initial_conditions = [R0, 0]

solution = odeint(system, initial_conditions, r_values2, args=(E_solution,))
zeta_values = solution[:, 0]
R_r_values = solution[:, 0] * (r_values2 ** k)

##########NORMALIZE##########






psi_squared = np.abs(R_r_values)**2
integral = np.trapz(psi_squared*r_values2, r_values2)
CN = 2*np.pi / np.sqrt(integral)
normalized_psi = CN * R_r_values

zero_crossings = np.where(np.diff(np.sign(normalized_psi)))[0]
num_zeros = len(zero_crossings)
print(f"Number of zeros: {num_zeros}")

# Display zero crossing indices for verification
print("Zero crossing indices (for verification):", zero_crossings)

plt.plot(r_values2, normalized_psi)
plt.xlabel(r'$r$', fontsize=18)
plt.ylabel(r'$\psi(r)$', fontsize=18)
plt.title(fr'$E = {E_solution}$ (Normalized)', fontsize=18)
plt.grid(True)
plt.show()

# Compute the energy 2 for two particles
psi_prime = np.gradient(normalized_psi, r_values2)**2-((k*normalized_psi)/r_values2)**2
kinetic_term = (1 / (2)) * (psi_prime)
potential_term = 0 * (normalized_psi**2)
interaction_term = ((1) / 2) * g * (normalized_psi**4)

integrand = r_values2 * (kinetic_term + potential_term + interaction_term)
energy = 4*np.pi * simps(integrand, r_values2)
energy2 = 4 *np.pi* np.trapz(integrand, r_values2)
landau = energy-E_solution

print("Eigenvalue: ", E_solution)
print("Energy: ", energy)
print("Energy2: ", energy2)
print("Landau Free Energy: ", landau)


################################
#

# Plot r vs zeta
plt.plot(r_values2, zeta_values)
plt.axhline(0, color='black', linestyle='dotted')
plt.xlabel(r'$r$', fontsize=18)
plt.ylabel(r'$\Gamma(r)$', fontsize=18)
plt.title(fr'$E = {E_solution}$', fontsize=18)
file_name = fr'Gamma_GS_E = {E_solution}.pdf'
#plt.savefig(file_name, dpi=600)
plt.grid(True)
plt.show()


r_values3 = np.linspace(1.0, ell, num_steps2)
# Plot r vs R_r
plt.figure(figsize=(8, 6))
plt.plot(r_values2, R_r_values)
#plt.plot(r_values3, r_values3**(-0.5), 'r--')
plt.axhline(0, color='black', linestyle='dotted')
plt.xlabel(r'$r$', fontsize=20)
plt.ylabel(fr'$R_{1}(r)$', fontsize=20)
plt.title(fr'$E = {E_solution}$', fontsize=20)
file_name = fr'g=0_Vortex = {E_solution}.pdf'
#plt.savefig(file_name, dpi=600)
plt.grid(True)
plt.show()



"""
max_index = np.argmax(R_r_values)
max_r_value = r_values2[max_index]
max_R_value = R_r_values[max_index]

asymp_match = np.sqrt(max_r_value)*max_R_value


print(f"Maximum of R_1(r) occurs at r = {max_r_value}, R_1(r) = {max_R_value}")
print(f"C= {asymp_match}")
r_values3 = np.linspace(max_r_value, ell, num_steps2)
# Plot r vs R_r
plt.plot(r_values2, R_r_values)
plt.plot(r_values3, asymp_match*r_values3**(-0.5), 'r--')
plt.plot(r_values3, -asymp_match*r_values3**(-0.5), 'r--')
plt.axhline(0, color='black', linestyle='dotted')
plt.xlabel(r'$r$', fontsize=20)
plt.ylabel(fr'$R_{1}(r)$', fontsize=20)
plt.title(fr'$E = {E_solution}$', fontsize=20)
file_name = fr'_ASYMP_COMPARE_Radial_States_GS_E = {E_solution}.pdf'
#plt.savefig(file_name, dpi=600)
plt.grid(True)
plt.show()







theta = np.linspace(0, 2*np.pi, 3000)

r, theta = np.meshgrid(r_values2, theta)
x = r * np.cos(theta)
y = r * np.sin(theta)

Vortex_solution = R_r_values * np.exp(1j * (k * theta))

vmin = min(np.real(Vortex_solution).min(), np.imag(Vortex_solution).min())
vmax = max(np.real(Vortex_solution).max(), np.imag(Vortex_solution).max())



#####################
from mpl_toolkits.mplot3d import Axes3D



fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')

surf = ax.plot_surface(x, y, np.real(Vortex_solution), cmap='viridis', linewidth=0, antialiased=False)

ax.view_init(elev=15, azim=45)
ax.grid(False)
ax.set_axis_off()
#plt.title(fr'$E = {E_solution},\qquad k = {k}$', fontsize=18)
file_name = fr'TIKZ_PEAK.png'
plt.savefig(file_name, dpi=600)
plt.show()

#########

plt.figure(figsize=(8, 6))
plt.pcolormesh(x, y, np.real(Vortex_solution), cmap='viridis', shading='auto', vmin=vmin, vmax=vmax)
plt.xlabel(r'$x$',fontsize=18)
plt.ylabel(r'$y$',fontsize=18)
plt.title(fr'$E = {E_solution},\qquad k = {k}$', fontsize=18)
cbar = plt.colorbar(label=r'$\Re[\psi(x,y)]$')
cbar.set_label(r'$\Re[\psi(x,y)]$', fontsize=18)
cbar.ax.tick_params(labelsize=16)
#plt.colorbar(label=r'$\Re[\psi(x,y)]$', fontsize=18)
#plt.title('NLS')
#plt.title(fr'$k = {k}$,$\quad$ $g = {gg}$, $\quad$ $E={E}$')
#plt.legend()
file_name = fr'REAL_Vortex_ES_k={k}.png'
#plt.savefig(file_name, dpi=600)
#plt.grid(True)
#plt.show()
#plt.savefig('spiral_solution_plotNLS_colormesh.png', dpi=600)  # Adjust the file name and dpi as needed
plt.show()




plt.figure(figsize=(8, 6))
plt.pcolormesh(x, y, np.imag(Vortex_solution), cmap='plasma', shading='auto', vmin=vmin, vmax=vmax)
plt.xlabel(r'$x$',fontsize=18)
plt.ylabel(r'$y$',fontsize=18)
cbar=plt.colorbar(label=r'$\Im[\psi(x,y)]$')
cbar.set_label(r'$\Im[\psi(x,y)]$', fontsize=18)
cbar.ax.tick_params(labelsize=16)
plt.title(fr'$E = {E_solution},\qquad k = {k}$', fontsize=18)
file_name = fr'IMAG_VORTEX_ES_k={k}.png'
plt.show()

plt.figure(figsize=(8, 6))
plt.pcolormesh(x, y, np.abs(np.real(Vortex_solution)**2 +np.imag(Vortex_solution)**2), cmap='jet', shading='auto')
plt.xlabel(r'$x$',fontsize=18)
plt.ylabel(r'$y$',fontsize=18)
plt.title(fr'$E = {E_solution},\qquad k = {k}$', fontsize=18)
cbar = plt.colorbar(label=r'$|\psi(x,y)|^2$')
cbar.set_label(r'$|\psi(x,y)|^2$', fontsize=18)
cbar.ax.tick_params(labelsize=16)
#plt.title('NLS')
#plt.title(fr'$k = {k}$,$\quad$ $g = {gg}$, $\quad$ $E={E}$')
#plt.legend()
file_name = fr'MOD_SQ_Vortex_ES_k={k}.png'
#plt.savefig(file_name, dpi=600)
#plt.grid(True)
#plt.show()
#plt.savefig('spiral_solution_plotNLS_colormesh.png', dpi=600)  # Adjust the file name and dpi as needed
plt.show()





from mpl_toolkits.mplot3d import Axes3D



fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')

surf = ax.plot_surface(x, y, np.real(Vortex_solution), cmap='viridis', linewidth=0, antialiased=False)
colorbar=fig.colorbar(surf, ax=ax)
colorbar.ax.tick_params(labelsize=16) 
colorbar.set_label(label=r'$\Re[\psi(x,y)]$',fontsize=20)

ax.set_xlabel(r'$x$',fontsize=16)
ax.set_ylabel(r'$y$',fontsize=16)
#ax.set_zlabel(r'$\Re[\psi(x,y)]$')
ax.view_init(elev=15, azim=45)

plt.title(fr'$E = {E_solution},\qquad k = {k}$', fontsize=18)
file_name = fr'3D_Vortex_REAL_ES_k = {k}.png'
#plt.savefig(file_name, dpi=600)
plt.show()






fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')

surf = ax.plot_surface(x, y, np.imag(Vortex_solution), cmap='plasma', linewidth=0, antialiased=False)
colorbar=fig.colorbar(surf, ax=ax)
colorbar.ax.tick_params(labelsize=16) 
colorbar.set_label(label=r'$\Im[\psi(x,y)]$',fontsize=20)

ax.set_xlabel(r'$x$',fontsize=16)
ax.set_ylabel(r'$y$',fontsize=16)
#ax.set_zlabel(r'$\Re[\psi(x,y)]$')
ax.view_init(elev=15, azim=45)

plt.title(fr'$E = {E_solution},\qquad k = {k}$', fontsize=18)
file_name = fr'3D_Vortex_IMAG_ES_k = {k}.png'
#plt.savefig(file_name, dpi=600)
plt.show()






fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')

surf = ax.plot_surface(x, y, np.real(Vortex_solution)**2+np.imag(Vortex_solution)**2, cmap='jet', linewidth=0, antialiased=False)
colorbar=fig.colorbar(surf, ax=ax)
colorbar.ax.tick_params(labelsize=16) 
colorbar.set_label(label=r'$|\psi(x,y)|^2$',fontsize=20)

ax.set_xlabel(r'$x$',fontsize=16)
ax.set_ylabel(r'$y$',fontsize=16)
#ax.set_zlabel(r'$\Re[\psi(x,y)]$')
ax.view_init(elev=35, azim=45)

plt.title(fr'$E = {E_solution},\qquad k = {k}$', fontsize=18)
file_name = fr'3D_Vortex_MOD_SQ_ES_k={k}.png'
#plt.savefig(file_name, dpi=600)
plt.show()
















psi_squared = np.abs(zeta_values)**2
integral = np.trapz(psi_squared, r_values)
CN = 1 / np.sqrt(integral)
normalized_psi = CN * zeta_values

plt.plot(r_values, normalized_psi)
plt.xlabel(r'$r$', fontsize=18)
plt.ylabel(r'$\psi(r)$', fontsize=18)
plt.title(fr'$E = {E_solution}$ (Normalized)', fontsize=18)
plt.grid(True)
plt.show()

# Compute the energy
psi_prime = np.gradient(normalized_psi, r_values)
kinetic_term = (hbar**2 / (2 * m)) * (psi_prime**2)
potential_term = 0 * (normalized_psi**2)
interaction_term = ((N - 1) / 2) * g * (normalized_psi**4)

integrand = r_values * (kinetic_term + potential_term + interaction_term)
energy = N * simps(integrand, r_values)
energy2 = N * np.trapz(integrand, r_values)
landau = energy-E_solution

print("Eigenvalue: ", E_solution)
print("Energy: ", energy)
print("Energy2: ", energy2)
print("Landau Free Energy: ", landau)
"""



